{"version":3,"sources":["types/types.ts","utils/helpers.ts","components/calculator/use-calculator-state.ts","components/calculator-manager/base-calculator.ts","components/calculator-manager/custom-calculator-one.ts","components/calculator-manager/custom-calculator-two.ts","blocks/checkbox.tsx","blocks/number-input.tsx","blocks/radio-button.tsx","blocks/floating-number-input.tsx","blocks/button.tsx","components/calculator/calculator.tsx","components/calculator-manager/use-calculate.ts","style/fonts.ts","core/global-style.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CalculatorModes","AMOUNT_FORMATTER","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","convertToFloat","value","format","replace","parseFloatingSting","parseFloat","BaseCalculator","options","valA","valB","valC","valD","valE","valF","this","valueA","valueB","valueC","valueD","Number","valueE","valueF","calculateM","toFixed","calculateP","calculateT","CustomCalculatorOne","CustomCalculatorTwo","CheckboxWrapper","styled","div","Label","span","InputCheckbox","input","Checkmark","CheckboxContainer","label","Checkbox","onInputChange","id","checked","type","onChange","e","data-id","aria-checked","placeholder","Input","NumberInput","RadioButtonWrapper","RadioButtonItem","RadioButton","inputLabel","onModeChange","selectedValue","FloatingNumberInput","onBlur","StyledButton","button","Button","disabled","onClick","children","CalculatorWrapper","section","displayName","H2","h2","CalculationTypeWrapper","CalculationInputsWrapper","CalculationSumInputsWrapper","Result","hasError","css","Calculator","useState","result","setResult","mode","BASE","calculatorMode","setCalculatorMode","inputs","inputsState","setInputsState","Set","selectedCheckboxes","setSelectedCheckboxes","handleInputsChange","useCallback","event","inputid","target","dataset","has","delete","add","newInputs","handleInputsNumberChange","onFloatFieldChange","handleModeChange","useCalculatorState","calculate","calculateSum","CUSTOM_1","CUSTOM_2","checkboxInputs","onGetResultsClick","isButtonDisabled","useMemo","some","item","size","GlobalStyle","createGlobalStyle","fonts","AppWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bb8d858.chunk.js","sourcesContent":["export type calculationMode = 'base' | 'custom1' | 'custom2'\n\nexport enum CalculatorModes {\n  BASE = 'base',\n  CUSTOM_1 = 'custom1',\n  CUSTOM_2 = 'custom2',\n}\n\nexport type Weight = 'light' | 'regular' | 'semibold' | 'bold'\nexport type Weights = { [key in Weight]: number }\n","const AMOUNT_FORMATTER = new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 2,\n  minimumFractionDigits: 1,\n})\n\nexport function convertToFloat(value: number) {\n  const formattedValue = AMOUNT_FORMATTER.format(value).replace(/,/gi, '.')\n  return formattedValue.replace('.0', '')\n}\n\nexport function parseFloatingSting(value: string) {\n  return parseFloat(value.replace(',', '.'))\n}\n","import React, { useCallback, useState } from 'react'\nimport { calculationMode, CalculatorModes } from '../../types'\nimport { convertToFloat, parseFloatingSting } from '../../utils/helpers'\n\ninterface CalculationModeState {\n  mode: calculationMode\n}\n\ninterface InputsProps {\n  valueA: boolean\n  valueB: boolean\n  valueC: boolean\n  valueD: string\n  valueE: string\n  valueF: string\n}\n\ninterface CalculationValuesState {\n  inputs: InputsProps\n}\n\nexport const useCalculatorState = () => {\n  const [calculatorMode, setCalculatorMode] = useState<CalculationModeState>({\n    mode: CalculatorModes.BASE,\n  })\n  const [inputsState, setInputsState] = useState<CalculationValuesState>({\n    inputs: {\n      valueA: false,\n      valueB: false,\n      valueC: false,\n      valueD: '',\n      valueE: '',\n      valueF: '',\n    },\n  })\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState(new Set())\n\n  const handleModeChange = (value: calculationMode) => {\n    setCalculatorMode({ mode: value })\n  }\n\n  const handleInputsChange = useCallback(\n    (event: React.SyntheticEvent<HTMLElement>, inputid: string) => {\n      const value = (event.target as HTMLInputElement).dataset.id\n\n      if (selectedCheckboxes.has(value)) {\n        selectedCheckboxes.delete(value)\n      } else {\n        selectedCheckboxes.add(value)\n      }\n\n      const newInputs = {\n        ...inputsState,\n        inputs: {\n          ...inputsState.inputs,\n          [inputid]: selectedCheckboxes.has(value),\n        },\n      }\n\n      setSelectedCheckboxes(selectedCheckboxes)\n      setInputsState(newInputs)\n    },\n    [selectedCheckboxes, inputsState]\n  )\n\n  const handleInputsNumberChange = useCallback(\n    (event: React.SyntheticEvent<HTMLElement>, inputid: string) => {\n      const value = (event.target as HTMLInputElement).value\n\n      const newInputs = {\n        ...inputsState,\n        inputs: {\n          ...inputsState.inputs,\n          [inputid]: value,\n        },\n      }\n\n      setInputsState(newInputs)\n    },\n    [inputsState]\n  )\n\n  const onFloatFieldChange = useCallback(\n    (event: React.SyntheticEvent<HTMLElement>) => {\n      const value = (event.target as HTMLInputElement).value\n\n      const newInputs = {\n        ...inputsState,\n        inputs: {\n          ...inputsState.inputs,\n          valueD: convertToFloat(parseFloatingSting(value)),\n        },\n      }\n\n      setInputsState(newInputs)\n    },\n    [inputsState]\n  )\n\n  return {\n    calculatorMode,\n    handleModeChange,\n    inputsState,\n    handleInputsChange,\n    handleInputsNumberChange,\n    onFloatFieldChange,\n    selectedCheckboxes,\n  }\n}\n","import { parseFloatingSting } from '../../utils/helpers'\nimport { CalculatorOptions } from './calculator-options'\n\nexport class BaseCalculator {\n  valA: boolean\n  valB: boolean\n  valC: boolean\n  valD: number\n  valE: number\n  valF: number\n\n  constructor(readonly options: CalculatorOptions) {\n    this.valA = options.valueA\n    this.valB = options.valueB\n    this.valC = options.valueC\n    this.valD = parseFloatingSting(options.valueD)\n    this.valE = Number(options.valueE)\n    this.valF = Number(options.valueF)\n  }\n\n  calculateSum() {\n    if (this.valA && this.valB && !this.valC) {\n      return this.calculateM().toFixed(2)\n    }\n    if (this.valA && this.valB && this.valC) {\n      return this.calculateP().toFixed(2)\n    }\n    if (!this.valA && this.valB && this.valC) {\n      return this.calculateT().toFixed(2)\n    }\n\n    return 'error'\n  }\n\n  calculateM() {\n    return this.valD + (this.valD * this.valE) / 10\n  }\n\n  calculateP() {\n    return this.valD + (this.valD * (this.valE - this.valF)) / 25.5\n  }\n\n  calculateT() {\n    return this.valD - (this.valD * this.valF) / 30\n  }\n}\n","import { BaseCalculator } from './base-calculator'\n\nexport class CustomCalculatorOne extends BaseCalculator {\n  calculateP() {\n    return 2 * this.valD + (this.valD * this.valE) / 100\n  }\n}\n","import { BaseCalculator } from './base-calculator'\n\nexport class CustomCalculatorTwo extends BaseCalculator {\n  calculateM() {\n    return this.valF + this.valD + (this.valD * this.valE) / 100\n  }\n\n  calculateSum() {\n    if (this.valA && this.valB && !this.valC) {\n      return this.calculateT().toFixed(2)\n    }\n    if (this.valA && !this.valB && this.valC) {\n      return this.calculateM().toFixed(2)\n    }\n\n    return super.calculateSum()\n  }\n}\n","import React, { FC } from 'react'\nimport styled from 'styled-components'\n\nconst CheckboxWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n`\n\nconst Label = styled.span`\n  font-size: 1.4rem;\n  font-weight: 500;\n`\n\nconst InputCheckbox = styled.input`\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n`\n\nconst Checkmark = styled.span`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 25px;\n  width: 25px;\n  background-color: #eee;\n\n  &:after {\n    content: '';\n    position: absolute;\n    display: none;\n  }\n`\n\nconst CheckboxContainer = styled.label`\n  display: block;\n  position: relative;\n  padding-left: 35px;\n  cursor: pointer;\n  font-size: 22px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n\n  &:hover ${InputCheckbox} {\n    background-color: #ccc;\n    ~ ${Checkmark} {\n      background-color: #ccc;\n    }\n  }\n\n  ${InputCheckbox} {\n    &:checked {\n      ~ ${Checkmark} {\n        background-color: #7aa76a;\n        &:after {\n          display: block;\n        }\n      }\n    }\n  }\n\n  ${Checkmark} {\n    &:after {\n      left: 9px;\n      top: 5px;\n      width: 5px;\n      height: 10px;\n      border: solid white;\n      border-width: 0 3px 3px 0;\n      -webkit-transform: rotate(45deg);\n      -ms-transform: rotate(45deg);\n      transform: rotate(45deg);\n    }\n  }\n`\n\ninterface RadioButtonProps {\n  value: string\n  id: string\n  checked: boolean\n  onInputChange: (event: React.SyntheticEvent<HTMLElement>, inputid: string) => void\n}\n\nexport const Checkbox: FC<RadioButtonProps> = ({ value, onInputChange, id, checked }) => {\n  return (\n    <CheckboxWrapper>\n      <CheckboxContainer>\n        <Label>{value}</Label>\n        <InputCheckbox\n          type=\"checkbox\"\n          onChange={(e) => onInputChange(e, id)}\n          data-id={id}\n          id={id}\n          checked={checked}\n          aria-checked={checked}\n          placeholder={value}\n        />\n        <Checkmark />\n      </CheckboxContainer>\n    </CheckboxWrapper>\n  )\n}\n","import React, { FC } from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.input`\n  padding: 2rem;\n  margin-bottom: 1.5rem;\n  font-size: 1.6rem;\n  font-weight: 500;\n  font-family: 'Open Sans', -apple-system, serif;\n  border: none;\n  border-radius: 1rem;\n  box-shadow: -2px 8px 13px -9px rgba(0, 0, 0, 0.33);\n\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n  }\n`\n\ninterface NumberInputProps {\n  label: string\n  value: string\n  id: string\n  onInputChange: (event: React.SyntheticEvent<HTMLElement>, inputid: string) => void\n}\n\nexport const NumberInput: FC<NumberInputProps> = ({ label, value, onInputChange, id }) => {\n  return (\n    <Input\n      placeholder={label}\n      type=\"number\"\n      onChange={(e) => onInputChange(e, id)}\n      id={id}\n      value={value}\n    />\n  )\n}\n","import React, { FC } from 'react'\nimport { calculationMode } from '../types'\nimport styled from 'styled-components'\n\nconst RadioButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n`\n\nconst Input = styled.input``\n\nconst Label = styled.span`\n  font-size: 14px;\n  font-weight: 500;\n`\n\nconst Checkmark = styled.span`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 25px;\n  width: 25px;\n  background-color: #eee;\n  border-radius: 50%;\n\n  &:after {\n    content: '';\n    position: absolute;\n    display: none;\n  }\n`\n\nconst RadioButtonItem = styled.label`\n  display: block;\n  position: relative;\n  padding-left: 3.5rem;\n  cursor: pointer;\n  font-size: 2.2rem;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n\n  &:hover {\n    ${Input} {\n      ~ ${Checkmark} {\n        background-color: #ccc;\n      }\n    }\n  }\n\n  ${Input} {\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n    height: 0;\n    width: 0;\n\n    &:checked {\n      ~ ${Checkmark} {\n        background-color: #7aa76a;\n\n        &:after {\n          display: block;\n        }\n      }\n    }\n  }\n\n  ${Checkmark} {\n    &:after {\n      top: 9px;\n      left: 9px;\n      width: 8px;\n      height: 8px;\n      border-radius: 50%;\n      background: white;\n    }\n  }\n`\n\ninterface RadioButtonProps {\n  inputLabel: string\n  value: calculationMode\n  selectedValue: calculationMode\n  onModeChange: (calculationMode: calculationMode) => void\n}\n\nexport const RadioButton: FC<RadioButtonProps> = ({\n  inputLabel,\n  value,\n  onModeChange,\n  selectedValue,\n}) => {\n  return (\n    <RadioButtonWrapper>\n      <RadioButtonItem>\n        <Input\n          type=\"radio\"\n          value={value}\n          onChange={() => onModeChange(value)}\n          checked={value === selectedValue}\n          aria-checked={value === selectedValue}\n          id={value}\n        />\n        <Checkmark />\n        <Label>{inputLabel}</Label>\n      </RadioButtonItem>\n    </RadioButtonWrapper>\n  )\n}\n","import React, { FC } from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.input`\n  padding: 2rem;\n  margin-bottom: 1.5rem;\n  font-size: 1.6rem;\n  font-weight: 500;\n  font-family: 'Open Sans', -apple-system, serif;\n  border: none;\n  border-radius: 1rem;\n  box-shadow: -2px 8px 13px -9px rgba(0, 0, 0, 0.33);\n\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n  }\n`\n\ninterface FloatingNumberInputProps {\n  label: string\n  value: string\n  id: string\n  onBlur: (event: React.SyntheticEvent<HTMLElement>) => void\n  onInputChange: (event: React.SyntheticEvent<HTMLElement>, inputid: string) => void\n}\n\nexport const FloatingNumberInput: FC<FloatingNumberInputProps> = ({\n  label,\n  value,\n  onBlur,\n  onInputChange,\n  id,\n}) => {\n  return (\n    <Input\n      placeholder={label}\n      type=\"number\"\n      onBlur={onBlur}\n      onChange={(e) => onInputChange(e, id)}\n      id={id}\n      value={value}\n    />\n  )\n}\n","import React, { FC } from 'react'\nimport styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  padding: 2rem;\n  margin-bottom: 1.5rem;\n  color: #fff;\n  background-color: #7aa76a;\n  font-size: 1.6rem;\n  font-weight: 500;\n  font-family: 'Open Sans', -apple-system, serif;\n  border: none;\n  border-radius: 1rem;\n\n  &:disabled {\n    background-color: #bababa;\n  }\n`\n\ninterface ButtonProps {\n  children: string\n  disabled: boolean\n  onClick: () => void\n}\n\nexport const Button: FC<ButtonProps> = ({ disabled, onClick, children }) => {\n  return (\n    <StyledButton disabled={disabled} onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n","import React, { useCallback, useMemo, useState } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useCalculatorState } from './use-calculator-state'\nimport { useCalculate } from '../calculator-manager/use-calculate'\nimport { Checkbox, RadioButton, NumberInput, FloatingNumberInput, Button } from '../../blocks'\n\nconst CalculatorWrapper = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  padding: 1.5rem;\n  background-color: #f4f4f4;\n  height: 100vh;\n  width: 68rem;\n\n  @media (max-width: 480px) {\n    width: 100%;\n  }\n`\nCalculatorWrapper.displayName = 'Calculator'\n\nconst H2 = styled.h2`\n  font-size: 3rem;\n  margin-bottom: 5rem;\n`\nH2.displayName = 'PageHeading'\n\nconst CalculationTypeWrapper = styled.div`\n  display: flex;\n  padding: 2.5rem 0;\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: -2px 8px 13px -9px rgba(0, 0, 0, 0.33);\n`\n\nconst CalculationInputsWrapper = styled.div`\n  display: flex;\n  padding: 4rem 0;\n  line-height: 2rem;\n`\n\nconst CalculationSumInputsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Result = styled.div<{ hasError: boolean }>`\n  font-size: 1.8rem;\n  padding: 2rem;\n  margin-bottom: 1rem;\n  border: 1px solid #000;\n  border-radius: 1rem;\n\n  ${({ hasError }) =>\n    hasError &&\n    css`\n      background-color: #f6c6ce;\n      border-color: #f6c6ce;\n    `}\n`\n\ntype calculatorState = number | null | string\n\nexport const Calculator = () => {\n  const [result, setResult] = useState<calculatorState>(null)\n  const {\n    calculatorMode,\n    handleModeChange,\n    handleInputsChange,\n    inputsState,\n    handleInputsNumberChange,\n    onFloatFieldChange,\n    selectedCheckboxes,\n  } = useCalculatorState()\n\n  const calculate = useCalculate()\n\n  const checkboxInputs = [\n    inputsState.inputs.valueD,\n    inputsState.inputs.valueE,\n    inputsState.inputs.valueF,\n  ]\n\n  const onGetResultsClick = useCallback(() => {\n    setResult(calculate(calculatorMode.mode, inputsState.inputs))\n  }, [calculate, calculatorMode.mode, inputsState.inputs])\n\n  const isButtonDisabled = useMemo(\n    () => checkboxInputs.some((item) => item === '') || selectedCheckboxes.size === 0,\n    [checkboxInputs, selectedCheckboxes.size]\n  )\n\n  return (\n    <CalculatorWrapper>\n      <H2>Select calculation type</H2>\n      <CalculationTypeWrapper>\n        <RadioButton\n          value=\"base\"\n          onModeChange={handleModeChange}\n          selectedValue={calculatorMode.mode}\n          inputLabel=\"Base\"\n        />\n        <RadioButton\n          value=\"custom1\"\n          onModeChange={handleModeChange}\n          selectedValue={calculatorMode.mode}\n          inputLabel=\"Custom 1\"\n        />\n        <RadioButton\n          value=\"custom2\"\n          onModeChange={handleModeChange}\n          selectedValue={calculatorMode.mode}\n          inputLabel=\"Custom 2\"\n        />\n      </CalculationTypeWrapper>\n      <CalculationInputsWrapper>\n        <Checkbox\n          value=\"value A\"\n          id=\"valueA\"\n          data-id=\"valueA\"\n          checked={inputsState.inputs.valueA}\n          onInputChange={handleInputsChange}\n        />\n        <Checkbox\n          value=\"value B\"\n          id=\"valueB\"\n          data-id=\"valueB\"\n          checked={inputsState.inputs.valueB}\n          onInputChange={handleInputsChange}\n        />\n        <Checkbox\n          value=\"value C\"\n          id=\"valueC\"\n          data-id=\"valueC\"\n          checked={inputsState.inputs.valueC}\n          onInputChange={handleInputsChange}\n        />\n      </CalculationInputsWrapper>\n      <CalculationSumInputsWrapper>\n        <FloatingNumberInput\n          label=\"value D\"\n          onBlur={onFloatFieldChange}\n          onInputChange={handleInputsNumberChange}\n          id=\"valueD\"\n          value={inputsState.inputs.valueD}\n        />\n        <NumberInput\n          label=\"value E\"\n          id=\"valueE\"\n          onInputChange={handleInputsNumberChange}\n          value={inputsState.inputs.valueE}\n        />\n        <NumberInput\n          label=\"value F\"\n          id=\"valueF\"\n          onInputChange={handleInputsNumberChange}\n          value={inputsState.inputs.valueF}\n        />\n      </CalculationSumInputsWrapper>\n      <div>\n        <Result hasError={result === 'error'}>\n          Result:{' '}\n          {result === 'error'\n            ? \"Something is not right with the calculation parameters you've selected. Try adjusting them\"\n            : result}\n        </Result>\n      </div>\n      <Button onClick={onGetResultsClick} disabled={isButtonDisabled} data-id=\"submit-button\">\n        Calculate\n      </Button>\n    </CalculatorWrapper>\n  )\n}\n","import { CalculatorOptions } from './calculator-options'\nimport { BaseCalculator, CustomCalculatorOne, CustomCalculatorTwo } from '../calculator-manager'\nimport { CalculatorModes, calculationMode } from '../../types'\n\nexport function useCalculate() {\n  return (mode: calculationMode, inputs: CalculatorOptions) => {\n    switch (mode) {\n      case CalculatorModes.BASE:\n        const baseCalculator = new BaseCalculator(inputs)\n        return baseCalculator.calculateSum()\n      case CalculatorModes.CUSTOM_1:\n        const customCalculator1 = new CustomCalculatorOne(inputs)\n        return customCalculator1.calculateSum()\n      case CalculatorModes.CUSTOM_2:\n        const customCalculator2 = new CustomCalculatorTwo(inputs)\n        return customCalculator2.calculateSum()\n      default:\n        return null\n    }\n  }\n}\n","import { css } from 'styled-components'\nimport { Weights } from '../types'\n\nexport const weight: Weights = {\n  light: 300,\n  regular: 400,\n  semibold: 600,\n  bold: 700,\n}\n\nexport default css`\n  & {\n    -webkit-font-smoothing: antialiased;\n    font-variant-ligatures: no-common-ligatures;\n    -moz-osx-font-smoothing: grayscale;\n\n    letter-spacing: 0;\n    line-height: 1.9375em;\n\n    font-family: 'Open Sans', 'Roboto+Condensed', -apple-system, BlinkMacSystemFont,\n      'Helvetica Neue', Arial, sans-serif;\n    font-weight: ${weight.regular};\n    font-size: 10px;\n  }\n`\n","import { createGlobalStyle } from 'styled-components'\nimport fonts from '../style/fonts'\n\nexport const GlobalStyle = createGlobalStyle`  \n  * {\n   box-sizing: border-box;\n  }\n  \n  html {\n    ${fonts};\n    font-size: 10px;\n  }\n  \n  body {\n    ${fonts};\n    margin: 0;\n    padding: 0;\n\n    width: 100vw;\n    min-height: 100vh;\n\n    #root {\n      min-height: 100vh;\n    }\n    &.prevent-body-scroll {\n      position: fixed;\n      overflow-y: hidden;\n    }\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Calculator } from './components/calculator/calculator'\nimport { GlobalStyle } from './core/global-style'\n\nconst AppWrapper = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media (max-width: 480px) {\n    width: 100%;\n  }\n`\n\nfunction App() {\n  return (\n    <AppWrapper>\n      <GlobalStyle />\n      <Calculator />\n    </AppWrapper>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}